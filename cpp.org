#+TITLE: Note of "A Tour of C++"
#+OPTIONS: toc:2 num:3 H:4 ^:nil pri:t
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="org.css" />

* The Basics
The minimal C++ program:
#+BEGIN_SRC C++
int main() { }
#+END_SRC

If no value is returned, the system will receive a value
indicating successful completion.

A function declaration may contain argument names.
#+BEGIN_SRC C++
double square(double); // return the square of the argument
#+END_SRC

If two functions are defined with the same name,
 but with different argument types,
 the compiler will choose the most appropriate function to invoke for each call.

Fundamental types: bool, char, int, double, unsigned.

| type       | sizeof |
|------------+--------|
| bool, char |      1 |
| int        |      4 |
| double     |      8 |

/The usual arithmetic conversions: expressions
 are computed at the highest precision of its operands./

Universal form based on curly-brace-delimited initializer lists:
#+BEGIN_SRC C++
  double d2 {2.3};
  complex<double> z3 = {1,2}; // the = is optional with { ... }
#+END_SRC

=auto=:
#+BEGIN_SRC c++
auto b = true;
#+END_SRC

/Range-for-statement/:
#+BEGIN_SRC c++
int v[] = {0,1,2,3,4,5,6,7,8,9};
for (auto& x : v) cout << x << '\n';
#+END_SRC

Use =nullptr= rather than =0= or =NULL=.

Prefer the ={}=-initializer syntax for declarations with a named type,
prefer the === syntax for the initialization in declarations using =auto=.

* User-Defined Types
A =struct= is simply a class with members public by default:
#+BEGIN_SRC c++
struct V{ int val; };
#+END_SRC

Class:
#+BEGIN_SRC c++
  class Vector {
  public:
    Vector(int s) : elem{new double[s]}, sz{s} {} // member initializer list
    double &operator[](int i) { return elem[i]; } // operation
    int size() { return sz; }

  private:
    double* elem;
    int sz;
  };
#+END_SRC

A =union= is a =struct= in which all members are allocated at the same address
so that the =union= occupies only as much space as its largest member.
Naturally, a =union= can hold a value for only one member at a time.
#+BEGIN_SRC c++
  union Value {
    char* s;
    int i;
  };
#+END_SRC


Enumeration:
#+BEGIN_SRC c++
enum class Color { red, blue, green };
Color col = Color::red;
#+END_SRC

An enumeration is a user-defined type so we can define operators for it.
You can remove the =class= from =enum= class to get a plain =enum=
(=int= value starts with 0).

* Modularity

Declarations / interfaces, =Vector.h=:
#+BEGIN_SRC c++
  class Vector {
  public:
    Vector(int s);
    double& operator[](int i);
    int size();
  private:
    double* elem;
  };
#+END_SRC

Avoid non-inline function definitions in headers.

Definitions / implementations, =Vector.cpp=:
#+BEGIN_SRC c++
  #include "Vector.h"
  Vector::Vector(int s) :elem{new double[s]}, sz{s} { }
  double& Vector::operator[](int i) { return elem[i]; }
  int Vector::size() { return sz; }
#+END_SRC

Namespaces:
#+BEGIN_SRC c++
  namespace My_code {
    class complex {
      // ...
    };
    complex sqrt(complex);
    // ...
    int main();
  }
  int My_code::main(){
    // ...
  };
#+END_SRC

Don't put a using-directive in a header file.

Exceptions:
#+BEGIN_SRC c++
  #include<stdexcept>
  throw out_of_range{"Vector::operator[]"};

  try { /* ... */ }
  catch (out_of_range) { /* ... */ }
  catch (...) { /* any exception */ }
#+END_SRC

Logic errors: =logic_error=, =domain_error=, =invalid_argument=, =length_error=, =out_of_range=.

Runtime errors: =runtime_error=, =range_error=, =overflow_error=, =underflow_error=.

A function that should never throw an exception can be declared noexcept:
#+BEGIN_SRC c++
void user(int sz) noexcept;
#+END_SRC

If still throws, the standard-library function =terminate()=
 is called to immediately terminate the program.

If operator =new= can't find memory to allocate, it throws a =std::bad_alloc=:
#+BEGIN_SRC c++
  try { /* ... */ }
  catch (std::bad_alloc) {
    std::terminate(); // handle memory exhaustion
  }
#+END_SRC

To rethrow the exception, we simply write =throw=:
#+BEGIN_SRC c++
  catch (std::length_error) {
    cout << "test failed: length error\n";
    throw; // rethrow
  }
#+END_SRC

Compile time check:
#+BEGIN_SRC c++
  static_assert(4 <= sizeof(int), "integers are too small");
#+END_SRC

* Classes
=const= function:
#+BEGIN_SRC c++
  double real() const { return re; }
#+END_SRC

Operations change object itself should return reference:
#+BEGIN_SRC c++
  complex& operator+=(complex z) { re+=z.re, im+=z.im; return *this; }
#+END_SRC

Functions defined in a class are inlined by default.
It is possible to explicitly require inlining by
preceeding a function declaration with the keyword =inline=.

Clever ways of implementing operations:
#+BEGIN_SRC c++
  complex operator−(complex a, complex b) { return a −= b; }
  // unary minus
  complex operator−(complex a) { return {−a.real(), −a.imag()}; }
#+END_SRC

Destructor:
#+BEGIN_SRC c++
  ~Vector() { delete[] elem; }
#+END_SRC

Initializer-list constructor:
#+BEGIN_SRC c++
  Vector::Vector(std::initializer_list<double> lst)
      : elem{new double[lst.size()]}, sz{static_cast<int>(lst.size())} {
    copy(lst.begin(), lst.end(), elem);
  }
#+END_SRC

=push_back=:
#+BEGIN_SRC c++
  Vector read(istream &is) {
    Vector v;
    for (double d; is >> d;)
      v.push_back(d);
    return v;
  }
#+END_SRC

Abstract type:
#+BEGIN_SRC c++
  class Container {
  public:
    // pure virtual function
    virtual double &operator[](int) = 0;
    // const member function
    virtual int size() const = 0;
    // destructor
    virtual  ~Container() {}
  };
#+END_SRC

The word =virtual= means "may be redefined later in a class derived from this one."

The curious ==0= syntax says the function is pure virtual;
that is, some class derived from =Container= *must* define the function.

A class with a pure virtual function is called an abstract class
and it's not possible to define an object of it.

As is common for abstract class, it does *not* have a constructor.
On the other hand, it *does* have a destructor and that destructor is =virtual=.

#+BEGIN_SRC c++
  class Vector_container : public Container {
    Vector v;

  public:
    Vector_container(int s) : v(s) {}
    ~Vector_container() {}
    double &operator[](int i) { return v[i]; }
    int size() const { return v.size(); }
  };
#+END_SRC

Note that the member destructor (=~Vector()=) is implicitly invoked
by its class's destructor (=~Vector_container()=).

Virtual function table (=vtbl=).

A function in a derived class overrides a virtual function
in a base class if that function has exactly the same name and type.

A function with a slightly different name or a slightly different type
may be intended to override or it may be intended to be a separate function.

Explicitly state that a function is meant to override:
#+BEGIN_SRC c++
  void move(Point to) override;
#+END_SRC

** Dynamic Casting

Dynamic casting:
#+BEGIN_SRC c++
  if (Smiley* p = dynamic_cast<Smiley*>(ps)) { /* ... */ }
#+END_SRC
If the object pointed to by the argument of =dynamic_cast=
is not of the expected type or a class derived from the expected type,
=dynamic_cast= returns =nullptr=.

When a different type is unacceptable, we can simply =dynamic_cast= to a reference type.
If the object is not of the expected type, =bad_cast= is thrown:
#+BEGIN_SRC c++
  Smiley &r{dynamic_cast<Smiley &>(*ps)};
#+END_SRC

Better resource handling: return =unique_ptr= rather than
a naked pointer and store =unique_ptrs= in the container:
#+BEGIN_SRC c++
  vector<unique_ptr<Shape>> v;
  v.push_back(unique_ptr<Shape>{new Circle{p, r}});
#+END_SRC

Now the object is owned by the =unique_ptr= which will delete the object
when it is no longer needed, that is, when its =unique_ptr= goes out of scope.

** Copy and Move

By default, objects can be copied.
The default meaning of copy is memberwise copy: copy each member.

#+BEGIN_SRC c++
  complex z2{z1}; // copy initialization
  complex z3;
  z3 = z2;        // copy assignment
#+END_SRC

Copy constructor and copy assignment:
#+BEGIN_SRC c++
  Vector(const Vector &a);            // copy constructor
  Vector &operator=(const Vector &a); // copy assignment

  Vector::Vector(const Vector &a) : elem{new double[a.sz]}, sz{a.sz} {
    for (int i = 0; i != sz; ++i)
      elem[i] = a.elem[i];
  }

  Vector &Vector::operator=(const Vector &a) {
    double* p = new double[a.sz];
    for (int i = 0; i != a.sz; ++i)
      p[i] = a.elem[i];
    delete[] elem; // delete old elements
    elem = p;
    sz = a.sz;
    return *this;
  }
#+END_SRC

To avoid copying in returning value:
#+BEGIN_SRC c++
  Vector foo(/* ... */) {
    Vector res;
    // ...
    return res;
  }

#+END_SRC

Move constructor and move assignment should be implemented:
#+BEGIN_SRC c++
  Vector(Vector &&a);            // move constructor
  Vector &operator=(Vector &&a); // move assignment

  Vector::Vector(Vector &&a)
      : elem{a.elem}, sz{a.sz} { // "grab the elements" from a
    a.elem = nullptr; a.sz = 0;  // now a has no elements
  }
#+END_SRC

The =&&= means /rvalue/ reference and is a reference to which we can bind an rvalue.
The word "rvalue" is intended to complement "lvalue," which roughly means
"something that can appear on the left-hand side of an assignment."
So an *rvalue* is – to a first approximation – *a value that you can't assign to*,
such as an integer returned by a function call.
Thus, an rvalue reference is a reference to something that nobody else can assign to,
so that we can safely "steal" its value.

A move operation is applied when an rvalue reference is used
as an initializer or as the right-hand side of an assignment.

Manually move with =std::move=:
#+BEGIN_SRC c++
  Vector f() {
    // ...
    z = x;            // we get a copy
    y = std::move(x); // we get a move
    return z;         // we get a move
  }
#+END_SRC


** Essential Operations

#+BEGIN_SRC c++
  class X {
  public:
    X(Sometype);             // ordinary constructor: create an object
    X();                     // default constructor
    X(const X &);            // copy constructor
    X(X &&);                 // move constructor
    X &operator=(const X &); // copy assignment: clean up target and copy
    X &operator=(X &&);      // move assignment: clean up target and move
    ~X();                    // destructor: clean up
    // ...
  };
#+END_SRC

Except for the ordinary constructor, these can be generated by compiler:
#+BEGIN_SRC c++
  class Y {
  public:
    Y(Sometype);
    Y(const Y &) = default; // I really want the default copy constructor
    Y(Y &&) = default;      // I really want the default copy constructor
    // ...
  };
#+END_SRC

If you are explicit about some defaults,
other default definitions will not be generated.

Eliminate the default definitions of those two operations:
#+BEGIN_SRC c++
  class Shape {
  public:
    // no copy operations
    Shape(const Shape &) = delete;
    Shape &operator=(const Shape &) = delete;
    // no move operations
    Shape(Shape &&) = delete;
    Shape &operator=(Shape &&) = delete;
    ~Shape();
    // ...
  };
#+END_SRC

A constructor taking a single argument defines a conversion from its argument type,
but if only =explicit= conversion is allowed:
#+BEGIN_SRC c++
  class Vector {
  public:
    explicit Vector(int s); // no implicit conversion from int to Vector
    // ...
  };
#+END_SRC

/C++ also offers a garbage collection interface
 so that you can plug in a garbage collector./

In the C++ standard library, RAII (Resource Acquisition Is Initialization) is pervasive:
 for example, memory (string, vector, map, =unordered_map=, etc.),
 files (ifstream, ofstream, etc.), threads (thread), locks (=lock_guard=, =unique_lock=, etc.),
 and general objects (through =unique_ptr= and =shared_ptr=).

* Templates
#+BEGIN_SRC c++
  template<typename T>
  class Vector {
  private:
    T* elem;
    // ...
  }
  Vector<T>::Vector(int s) { // ...
#+END_SRC

Using =class= to introduce a type parameter is equivalent to using =typename=,
and in older code we often see =template<class T>= as the prefix.

The =>>= in =Vector<list<int>>= terminates the nested template arguments;
it is not a misplaced input operator.
It is not (as in C++98) necessary to place a space between the two >s.

Provide =begin()= and =end()= to support =range-for=:
#+BEGIN_SRC c++
  template <typename T>
  T *begin(Vector<T> &x) {
    // pointer to first element or nullptr
    return x.size() ? &x[0] : nullptr;
  }
  template <typename T>
  T *end(Vector<T> &x) {
    // pointer to one-past-last element
    return begin(x) + x.size();
  }
  void f2(Vector<string> &vs) {
    for (auto &s : vs)
      cout << s << '\n';
  }
#+END_SRC

Templates are a compile-time mechanism,
so their use incurs no run-time overhead compared to hand-crafted code.

A template can take value arguments:
#+BEGIN_SRC c++
  template<typename T, int N>
  struct Buffer {
    using value_type = T;
    constexpr int size() { return N; }
    T[N];
    // ...
  };
#+END_SRC

The alias =value_type= and the =constexpr= function are provided
to allow users (read-only) access to the template arguments.

Can be used to create arbitrarily sized buffers on stack:
#+BEGIN_SRC c++
  Buffer<char,1024> glob;
#+END_SRC

Function object: objects that can be called like functions:
#+BEGIN_SRC c++
  template<typename T>
  class Less_than {
    const T val; // value to compare against
  public:
    Less_than(const T &v) : val(v) {}
    bool operator()(const T &x) const { return x < val; } // call operator
  };

  count(vec, Less_than<int>{x});
#+END_SRC

Lambda expression:
#+BEGIN_SRC c++
  count(vec, [&](int a) { return a < x; });
#+END_SRC

Capture nothing is =[ ]= , capture all local names used by reference is =[&]= ,
 and capture all local names used by value is =[=]= .

Had we wanted to capture only x, we could have said so: =[&x]= .
Had we wanted to give the generated object a copy of x,
we could have said so: =[=x]= .

Variadic templates:
#+BEGIN_SRC c++
  void f() { } // do nothing
  template<typename T, typename... Tail>
  void f(T head, Tail... tail) {
    g(head);    // do something to head
    f(tail...); // try again with tail
  }
#+END_SRC

Another example in chapter 11:
#+BEGIN_SRC c++
  template <typename T, typename... Args>
  unique_ptr<T> make_unique(Args &&... args) {
    return std::unique_ptr<T>{new T{std::forward<Args>(args)...}};
  }
#+END_SRC

Aliases:
#+BEGIN_SRC c++
  // in <cstddef>
  using size_t = unsigned int;
#+END_SRC

It is very common for a parameterized type to provide
an alias for types related to their template arguments.
#+BEGIN_SRC c++
  template<typename T>
  class Vector {
  public:
    using value_type = T;
    // ...
  };
#+END_SRC

In fact, every standard-library container provides
=value_type= as the name of its value type.
#+BEGIN_SRC c++
  template <typename C>
  using Element_type = typename C::value_type;

  template <typename Container>
  void algo(Container &c) {
    Vector<Element_type<Container>> vec;
    // ...
  }
#+END_SRC

A function template argument needs to be explicitly mentioned
only if it cannot be deduced or if there is no default:
#+BEGIN_SRC c++
  template <typename Target = string, typename Source = string>
  Target to(Source arg) {
    // ...
  }
  int main() {
    auto x1 = to<string, double>(1.2);
    auto x2 = to<string>(1.2); // Source is deduced to double
    auto x3 = to<>(1.2);
    auto x4 = to(1.2);
  }
#+END_SRC

* Library Overview

#+CAPTION: Selected Standard Library Headers
| header          | declaration                                |
|-----------------+--------------------------------------------|
| <string>        | string, basic_string                       |
| <regex>         | regex, smatch                              |
|-----------------+--------------------------------------------|
| <fstream>       | fstream, ifstream, ofstream                |
| <iostream>      | istream, ostream, cin, cout                |
| <sstream>       | istrstream, ostrstream                     |
|-----------------+--------------------------------------------|
| <array>         | array                                      |
| <vector>        | vector                                     |
| <set>           | set, multiset                              |
| <map>           | map, multimap                              |
| <unordered_map> | unordered_map, unordered_multimap          |
|-----------------+--------------------------------------------|
| <algorithm>     | copy(), find(), sort()                     |
| <random>        | default_random_engine, normal_distribution |
| <memory>        | unique_ptr, shared_ptr, allocator          |
| <utility>       | move(), swap(), pair                       |
|-----------------+--------------------------------------------|
| <cmath>         | sqrt(), pow()                              |
| <complex>       | complex, sqrt(), pow()                     |
|-----------------+--------------------------------------------|
| <future>        | future, promise                            |
| <thread>        | thread                                     |
|-----------------+--------------------------------------------|
| <forward_list>  | forward_list                               |
| <stdexcept>     | length_error, out_of_range, runtime_error  |
| <chrono>        | duration, time_point                       |
| <ios>           | hex,dec,scientific,fixed,defaultfloat      |

* Strings and Regular Expressions

A string is mutable: ===, =+==, =[]=.

=.size()=, =.insert()=, =.erase()=, =.find()= (=string::npos=),
=.substr()=, =.replace()=, =.c_str()= (read-only).

*short-string optimization*: short string values are kept in the string object itself
and only longer strings are placed on free store.

=string= is really an alias for a general template =basic_string=
with the character type =char=:
#+BEGIN_SRC c++
using string = basic_string<char>
#+END_SRC

=wstring=, =u16string=, =u32string=.

** Regular Expressions

Pattern:
#+BEGIN_SRC c++
regex pat (R"(\w{2}\s∗\d{5}(−\d{4})?)");
#+END_SRC

=regex_match()=, =regex_search()=, =regex_replace()=, =regex_iterator=, =regex_token_iterator=.

#+BEGIN_SRC c++
  int lineno = 0;
  for (string line; getline(cin, line);) {
    ++lineno;
    smatch matches;
    if (regex_search(line, matches, pat))
      cout << lineno << ": " << matches[0] << '\n';
  }
#+END_SRC

An smatch is a vector of sub-matches of type string.
The first element, here =matches[0]=, is the complete match.

Sub-match:
#+BEGIN_SRC c++
  if (1 < matches.size() && matches[1].matched)
    cout << "\t: " << matches[1] << '\n';
#+END_SRC

Regular expressions are compiled into state machines for efficient execution.

Character classes and abbreviations (skipped here).

Iterator:
#+BEGIN_SRC c++
  string input = "aa as; asd ++eˆasdf asdfg";
  regex pat{R"(\s+(\w+))"};
  for (sregex_iterator p(input.begin(), input.end(), pat);
       p != sregex_iterator{}; ++p)
    cout << (*p)[1] << '\n';
#+END_SRC

Return strings by value (rely on move semantics).

Use a string_stream or a generic value extraction function (such as =to<X>=)
for numeric conversion of strings.

* I/O Streams

By default, =>>= skips initial whitespace.

By default, a whitespace character, such as a space or a newline, terminates the read.
You can read a whole line (including the terminating newline character) using the =getline()= function.
#+BEGIN_SRC c++
getline(cin,str);
#+END_SRC

I/O state:
#+BEGIN_SRC c++
  while (cin >> i)
    res.push_back(i);

  if (cin.eof()) {
    // ...
  } else if (cin.fail()) { // a potentially recoverable error
    cin.clear();           // reset the state to good()
    // ...
    // if fail again
    cin.setstate(ios_base::failbit); // add fail() to cin's state
  }
#+END_SRC

Custom =<<= and =>>= :
#+BEGIN_SRC c++
  ostream &operator<<(ostream &os, const Entry &e) {
    return os << "{\"" << e.name << "\", " << e.number << "}";
  }

  istream &operator>>(istream &is, Entry &e) {
    char c, c2;
    if (is >> c && c == '{' && is >> c2 && c2 == '"') { // start with a {"
      string name;                                      // read a string name
      while (is.get(c) && c != '"')                     // end with "
        name += c;
      if (is >> c && c == ',') { // seperated by ,
        int number = 0;
        if (is >> number >> c && c == '}') { // read the number and a }
          e = {name, number};
          return is;
        }
      }
    }
    // oh no
    is.setstate(ios_base::failbit);
    return is;
  }
#+END_SRC

Formatting:
#+BEGIN_SRC c++
  #include<iostream>
  #include<ios>
  using namespace std;

  int main(){
    cout << 1234 << ','
         << hex << 1234 << ','
         << oct << 1234 << '\n';
    // 1234,4d2,2322
    constexpr double d = 123.456;
    cout << d << "; "
         << scientific << d << "; "
         << fixed << d << "; "
         << defaultfloat << d << '\n';
    // 123.456; 1.234560e+02; 123.456000; 123.456
    cout.precision(2);
    cout << fixed << d << '\n';
    // 123.46
  }
#+END_SRC

=precision()= affects =defaultfloat=, =scientific=, =fixed=.

=#include <iomanip>= when using standard manipulators taking arguments.

Test files for reading and writing:
#+BEGIN_SRC c++
  ofstream ofs("target");
  if (!ofs) error("couldn't open 'target' for writing");
  ifstream ifs("source");
  if (!ifs) error("couldn't open 'source' for reading");
#+END_SRC

=<sstream>= : =istringstream=,  =ostringstream=, =stringstream=.

The result from an istringstream can be read using =str()=.

Use =stringstream= for in-memory formatting.

* Containers

typical implementation of vector:
+ elem : a handle holding pointers to the first element
+ space : one-past-the-last element
+ last : one-past-the-last allocated space
+ alloc : allocator from which can acquire memory for elements

Initilize:
#+BEGIN_SRC c++
  vector<int> v1 = {1, 2, 3, 4}; // size is 4
  vector<string> v2;             // size is 0
  vector<Shape*> v3(23);         // size is 23; initial element value: nullptr
  vector<double> v4(32, 9.9);    // size is 32; initial element value: 9.9
#+END_SRC

A vector can be copied in assignments and initializations:
#+BEGIN_SRC c++
  vector<Entry> book2 = phone_book;
#+END_SRC

When you insert a new element, its value is copied into the container.

The =at()= operation throws an exception of type =out_of_range=
if its argument is out of the vector's range.

=list= : doubly-linked list.

=map= : a search tree (a red-black tree).

If a key isn’t found with =[]=, it is inserted into the =map= with a default value for its value.

=nordered_map=.
The standard-library provides a default hash function for strings
as well as for other built-in and standard-library types.
If necessary, you can provide your own.

A hash function is often provided as a function object:
#+BEGIN_SRC c++
  struct Record {
    string name;
    int product_code;
    // ...
  };
  // a hash function for Record
  struct Rhash {
    size_t operator()(const Record &r) const {
      return hash<string>()(r.name) ^ hash<int>()(r.product_code);
    }
  };
  // set of Recoreds using Rhash for lookup
  unordered_set<Record, Rhash> my_set;
#+END_SRC

Creaing a new hash function by combining existing hash functions
using exclusive or (^) is simple and often very effective.

+ vector<T>, list<T>, forward_list<T>
+ map<K,V>, multimap<K,V>, unordered_map<K,V>, unordered_multimap<K,V>
+ set<T>, multiset<T>, unordered_set<T> unordered_multiset<T>
+ deque<T>, queue<T>, stack<T>, priority_queue<T>
+ fixed-size array =array<T,N>=, bitset<N>
 
Please note that a vector is usually more efficient than a list
for short sequences of small elements (even for insert() and erase()).

Use =forward_list= for sequences that are usually empty.

When it comes to performance, don’t trust your intuition: measure.

Pass a container by reference and return a container by value.

* Algorithms

#+BEGIN_SRC c++
  sort(vec.begin(), vec.end());
  unique_copy(vec.begin(), vec.end(), lst.begin());
  unique_copy(vec.begin(), vec.end(), back_inserter(lst));
#+END_SRC

 #+BEGIN_SRC c++
   if (find(s.begin(), s.end(), c) != s.end())
     /* ... */;
 #+END_SRC

each container knows its iterator types and makes them available
under the conventional names =iterator= and =const_iterator=.

#+BEGIN_SRC c++
  template <typename C, typename V>
  vector<typename C::iterator> find_all(C &c, V v) {
#+END_SRC

The typename is needed to inform the compiler that
C's iterator is supposed to be a type and not a value of some type.

With aliases:
#+BEGIN_SRC c++
template<typename T>
using Iterator = typename T::iterator;

template<typename C, typename V>
vector<Iterator<C>> find_all(C& c, V v) {
#+END_SRC

Stream iterator:
#+BEGIN_SRC c++
  int main() {
    ostream_iterator<string> oo{cout}; // write strings to cout
    ,*oo = "Hello, ";  // meaning cout<<"Hello, "
    ++oo;
    ,*oo = "world!\n"; // meaning cout<<"world!\n"
    istream_iterator<string> ii{cin};
    istream_iterator<string> eos{}; // indicate the end of input
  }
#+END_SRC

Manipulate files:
#+BEGIN_SRC c++
  int unique_copy(string from, string to) {
    ifstream is{from};
    ofstream os{to};
    set<string> b{istream_iterator<string>{is}, istream_iterator<string>{}};
    copy(b.begin(), b.end(), ostream_iterator<string>{os, "\n"});
    return !is.eof() || !os;
  }
#+END_SRC

Predictors:
#+BEGIN_SRC c++
  struct Greater_than {
    int val;
    Greater_than(int v) : val{v} {}
    bool operator()(const pair<string, int> &r) { return r.second > val; }
  };
  // use as
  auto p = find_if(m.begin(), m.end(), Greater_than{42});
  // or lambda
  auto p = find_if(m.begin(), m.end(), [](const pair<string,int>& r) { return r.second>42; });
#+END_SRC

A predicate must not modify its argument.

Functions in =<algorithm>=:
#+BEGIN_SRC c++
  p = find(b, e, x);
  p = find_if(b, e, f);
  n = count(b, e, x);
  n = count_if(b, e, f);
  replace(b, e, v, v2);
  replace_if(b, e, f, v2);
  p = copy(b, e, out); // from [b:e) to [out:p)
  p = copy_if(b, e, out, f);
  p = move(b, e, out);
  p = unique_copy(b, e, out);
  sort(b, e);
  sort(b, e, f);                   // Sort elements of [b:e) using f
  (p1, p2) = equal_range(b, e, v); // [p1:p2) is the subsequence with the value v
  p = merge(b, e, b2, e2, out);
#+END_SRC

Some algorithms, such as =replace()= and =sort()=, modify element values,
But *no algorithm add or subtract elements* of a container.

If you want to add elements, you need something,
such as an =back_inserter= that knows about the container.

* Utilities
** Smart Pointers
In =<memory>=, the stan- dard library provides two 
smart pointers to help manage objects on the free store:
1. =unique_ptr= to represent unique ownership
2. =shared_ptr= to represent shared ownership

The =shared_ptr= is similar to =unique_ptr= except that
shared_ptrs are *copied rather than moved*.

The shared_ptrs for an object share ownership of an object and
that object is destroyed when the last of its shared_ptrs is destroyed.

the standard library (in =<memory>=) provides a function =make_shared()=:
#+BEGIN_SRC c++
  shared_ptr<S> p1{new S{1, "Ankh Morpork", 4.65}};
  auto p2 = make_shared<S>(2, "Oz", 7.62);
#+END_SRC

Use =unique_ptr= to refer to objects of polymorphic type.
Use =shared_ptr= to refer to shared objects.

** Specialized Containers


#+CAPTION: Almost Conainers
| Container       | Description                                                         |
|-----------------+---------------------------------------------------------------------|
| T[N]            | Built-in array                                                      |
| array<T,N>      | Like the built-in array, but *with most problems solved*            |
| bitset<N>       |                                                                     |
| vector<bool>    | A sequence of bits *compactly* stored in a specialization of vector |
| pair<T,U>       |                                                                     |
| tuple<T...>     |                                                                     |
| basic_string<C> |                                                                     |
| valarray<T>     | An array of numeric values of type T; provides numeric operations   |

*** array
An array, defined in =<array>=, is a fixed-size sequence of elements of a given type
where *the number of elements is specified at compile time*.

Thus, an array can be allocated with its elements on the stack,
in an object, or in static storage.

There is no overhead (time or space) involved in using an array
compared to using a built-in array.

An array knows its size, can be copied (using = or initialization),
and saves one from surprising nasty conversions to pointers.

An array does not "handle to elements."

The element count is not optional:
#+BEGIN_SRC c++
  array<int> ax = {1, 2, 3};
#+END_SRC

an array can be explicitly passed to a C-style function that expects a pointer:
#+BEGIN_SRC c++
  void f(int∗ p, int sz); // C-style interface
  void g() {
    array<int, 10> a;
    f(a, a.size());                         // error: no conversion
    f(&a[0], a.size());                     // C-style use
    f(a.data(), a.size());                  // C-style use
    auto p = find(a.begin(), a.end(), 777); // C++/STL-style use
  }
#+END_SRC

*** bitset
A =bitset= can be initialized with an integer or a string:
#+BEGIN_SRC c++
  bitset<9> bs1{"110001111"};
  bitset<9> bs2{399};
  bitset<9> bs3 =  ̃bs1;
  bitset<9> bs4 = bs1 & bs3;
  bitset<9> bs5 = bs1 << 2;
#+END_SRC

=to_ullong()= and =to_string()= provide the inverse operations to the constructors.

*** pair and tuple

The make_pair() / make_tuple() function makes it easy to create
a pair / tuple without explicitly mentioning its type.

Elements of tuple can be accessed by =get<0>(t), get<1>(t), get<2>(t)=.

*** Time
The standard-library facilities for dealing with time
are found in the subnamespace =std::chrono= in =<chrono>=.

Timing something:
#+BEGIN_SRC c++
  using namespace std::chrono;
  auto t0 = high_resolution_clock::now();
  do_work();
  auto t1 = high_resolution_clock::now();
  cout << duration_cast<milliseconds>(t1−t0).count() << "msec\n";
#+END_SRC

*** Function
A function adaptor takes a function as argument and returns a function object
that can be used to invoke the original function.

The standard library provides =bind()= and =mem_fn()= adaptors to do argument binding,
also called /Currying/ or /partial evaluation/.

#+BEGIN_SRC c++
  #include<functional>
  void f(int, const string &);
  auto g = bind(f, 2, placeholders::_1); // bind f()’s first argument to 2
  f(2, "hello");
  g("hello");
#+END_SRC

Use =mem_fn()= to create function objects that can invoke a member function
when called using the traditional function call notation.
#+BEGIN_SRC c++
  p−> draw();
  auto draw = mem_fn(&Shape::draw);
  draw(p);

  for_each(v.begin(), v.end(), mem_fn(&Shape::draw));
#+END_SRC

Often, a lambda is an alternative to using =bind()= or =mem_fn()=.

A =function= is specified with a specific return type and a specific argument type:
#+BEGIN_SRC c++
  int f1(double);
  function<int(double)> fct{f1}; // initialize to f1

  void user() {
    fct = [](double d) { return round(d); }; // assign lambda to fct
    fct = f1;                                // assign function to fct
  }
#+END_SRC

Use function when you need to store something that can be called.

A type function is a function that is evaluated at compile-time
given a type as its argument or returning a type.
#+BEGIN_SRC c++
  #include <limits>
  constexpr float min = numeric_limits<float>::min(); // smallest positive float
#+END_SRC

Metaprogramming or (when templates are involved) template metaprogramming.

=iterator_trait=, tag dispatch, type predicates.

=<type_traits>= : is_arithmetic, is_class, is_pod, is_literal_type,
has_virtual_destructor, and is_base_of.

* Numerics
=<math>= for float, double, long double :
abs(x), ceil(x), floor(x), sqrt(x), cos(x), sin(x),
tan(x), acos(x), asin(x), sinh(x), cosh(x), tanh(x),
exp(x), log(x).

The versions for =complex= are found in =<complex>=.

Errors are reported by setting errno from =<cerrno>= to =EDOM=
for a domain error and to =ERANGE= for a range error:
#+BEGIN_SRC c++
  errno = 0; // clear old error state
  // ...
  if (errno == EDOM) cerr << "domain error";
  if (errno == ERANGE) cerr << "range error";
#+END_SRC


#+CAPTION: Numerical Algorithms in =<numeric>=
| Function                         | Description                                                  |
|----------------------------------+--------------------------------------------------------------|
| x=accumulate(b,e,i)              |                                                              |
| x=accumulate(b,e,i,f)            | using f instead of +                                         |
| x=inner_product(b,e,b2,i)        | inner product of [b:e) and [b2:b2+(e−b)), i is initial value |
| x=inner_product(b,e,b2,i,f,f2)   | using f and f2 instead of + and *                            |
| p=partial_sum(b,e,out)           |                                                              |
| p=partial_sum(b,e,out,f)         |                                                              |
| p=adjacent_difference(b,e,out)   |                                                              |
| p=adjacent_difference(b,e,out,f) |                                                              |
| iota(b,e,v)                      | For each element in [b:e) assign ++v: v+1, v+2, ...          |

A random number generator consists of two parts:
1. an *engine* that produces a sequence of random or pseudo-random values.
2. a *distribution* that maps those values into a mathematical distribution in a range.

#+BEGIN_SRC c++
  auto die = bind(uniform_int_distribution<>{1, 6},
                  default_random_engine{});
  int x = die();
#+END_SRC

=valarray= in =<valarray>=  is less general and
more amenable to *optimization for numerical computation*.

Properties of numeric types are accessible through numeric_limits.
Use numeric_limits to check that the numeric types are adequate for their use.

* Concurrency

threads, mutexes, lock() operations, packaged_tasks, and futures.

*task* s a computation that can potentially be executed concurrently with other computations.
A *thread* is the system-level representation of a task in a program.

A task is a function or a function object and launched as argument
by constructing a =std::thread= (found in =<thread>=).

#+BEGIN_SRC c++
  void f();  // function
  struct F { // function object
    void operator()();
  };
  void user() {
    thread t1{f};
    thread t2{F()};
    t1.join(); // wait for t1
    t2.join(); // wait for t2
  }
#+END_SRC

To =join= a thread means to wait for the thread to terminate.

Threads of a program *share a single address space*.
In this, threads differ from processes, which generally do not directly share data.
Since threads share an address space, they can communicate through shared objects.

The =ref()= is a type function from =<functional>= that unfortunately is needed
to tell the variadic template to treat some_vec as a reference,
rather than as an object.
#+BEGIN_SRC c++
  void f(vector<double> &v);
  thread t1{f, ref(some_vec)};
#+END_SRC

pass the input data by const reference and to
pass the location of a place to deposit the result as a separate argument:
#+BEGIN_SRC c++
  void f(const vector<double> &v, double *res);
  thread t1{f, cref(some_vec), &res1};
#+END_SRC
=cref= is for =const=.

A =mutex= in =<mutex>= is a mutual exclusion object.
A thread acquires a mutex using a =lock()= operation:
#+BEGIN_SRC c++
  mutex m;
  int sh;
  void f() {
    unique_lock<mutex> lck{m};
    sh += 7;
  } // release mutex implicitly
#+END_SRC
The =unique_lock= releases the mutex with a call =m.unlock()=.

Acquiring several locks simultaneously to avoid deadlock:
#+BEGIN_SRC c++
  unique_lock<mutex> lck1 {m1,defer_lock};
  unique_lock<mutex> lck2 {m2,defer_lock};
  unique_lock<mutex> lck3 {m3,defer_lock};
  // ...
  lock(lck1,lck2,lck3);
#+END_SRC

Sleep:
#+BEGIN_SRC c++
  using namespace std::chrono;
  this_thread::sleep_for(milliseconds{20});
#+END_SRC

The basic support for communicating using external events
is provided by condition_variables found in =<condition_variable>=.
A =condition_variable= is a mechanism allowing one thread to wait for another:
#+BEGIN_SRC c++
  queue<Message> mqueue;
  condition_variable mcond;
  mutex mmutex;

  void consumer() {
    while (true) {
      unique_lock<mutex> lck{mmutex};
      while (mcond.wait(lck))
        /* do nothing */;
      auto m = mqueue.front();
      mqueue.pop();
      lck.unlock();
      // process m...
    }
  }
  void producer() {
    while (true) {
      Message m;
      // ... fill the message ...
      unique_lock<mutex> lck{mmutex};
      mqueue.push(m);
      mcond.notify_one();
    }
  }
#+END_SRC

=<future>=:
1. future and promise
2. packaged_task
3. async()

#+BEGIN_SRC c++
  void f(promise<X> &px) {
    try {
      X res; // ...
      px.set_value(res);
    } catch (...) {
      px.set_exception(current_exception()); // pass the exception
    }
  }
  void g(future<X> &fx) { X v = fx.get(); /* block */ }
#+END_SRC

The packaged_task type is provided to simplify setting up tasks
connected with futures and promises to be run on threads:
#+BEGIN_SRC c++
  double accum(double∗ beg, double∗ end, double init) {
    return accumulate(beg, end, init);
  }
  double sum(vector<double>& v) {
    using Task_type = double(double∗, double∗, double); // accumulate
    packaged_task<Task_type> pt0{accum};
    packaged_task<Task_type> pt1{accum};
    future<double> f0{pt0.get_future()};
    future<double> f1{pt1.get_future()};

    double∗ first = &v[0];
    thread t1{move(pt0), first, first + v.size() / 2, 0};
    thread t2{move(pt1), first + v.size() / 2, first + v.size(), 0};
    return f0.get() + f1.get();
  }
#+END_SRC

Using =async()=, you don’t have to think about threads and locks.
Instead, you think just in terms of tasks that potentially compute their results asynchronously:
#+BEGIN_SRC c++
  auto v0 = &v[0]; auto sz = v.size();
  auto f0 = async(accum, v0, v0 + sz / 4, 0.0);
  auto f1 = async(accum, v0 + sz / 4, v0 + sz / 2, 0.0);
  auto f2 = async(accum, v0 + sz / 2, v0 + sz∗3 / 4, 0.0);
  auto f3 = async(accum, v0 + sz∗3 / 4, v0 + sz, 0.0);
  // f0.get() + f1.get() + f2.get() + f3.get();
#+END_SRC
