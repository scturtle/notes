#+TITLE: MLIR cheatsheet
#+OPTIONS: toc:2 num:3 H:4 ^:nil pri:t
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="org.css"/>

* foo-opt

Create =CMakeLists.txt=:
#+begin_src cmake
cmake_minimum_required(VERSION 3.25)
project(foo)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

find_package(MLIR REQUIRED CONFIG)
message(STATUS "Using MLIRConfig.cmake in: ${MLIR_DIR}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/bin)
set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/lib)
set(MLIR_BINARY_DIR ${CMAKE_BINARY_DIR})

list(APPEND CMAKE_MODULE_PATH "${MLIR_CMAKE_DIR}")
list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")
include(TableGen)
include(AddLLVM)
include(AddMLIR)
include(HandleLLVMOptions)

include_directories(${LLVM_INCLUDE_DIRS})
include_directories(${MLIR_INCLUDE_DIRS})
include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_BINARY_DIR}/include)
link_directories(${LLVM_BUILD_LIBRARY_DIR})
add_definitions(${LLVM_DEFINITIONS})

add_llvm_executable(foo-opt tools/FooOpt.cpp)
llvm_update_compile_flags(foo-opt)
target_link_libraries(foo-opt PRIVATE
  MLIROptLib
)
mlir_check_all_link_libraries(foo-opt)
#+end_src

Create =tools/FooOpt.cpp=:
#+begin_src c++
#include "mlir/Tools/mlir-opt/MlirOptMain.h"

int main(int argc, char **argv) {
  mlir::DialectRegistry registry;

  return mlir::asMainReturnCode(
      mlir::MlirOptMain(argc, argv, "foo opt\n", registry));
}
#+end_src

=build.sh=:
#+begin_src bash
cmake -H. -Bbuild -GNinja \
	-DMLIR_DIR=${PATH_TO_MLIR_BUILD}/build/lib/cmake/mlir \
	-DLLVM_DIR=${PATH_TO_MLIR_BUILD}/build/lib/cmake/llvm
#+end_src

* register built-in dialects

Modify =CMakeLists.txt=:
#+begin_src diff
 link_directories(${LLVM_BUILD_LIBRARY_DIR})
 add_definitions(${LLVM_DEFINITIONS})
 
+get_property(dialect_libs GLOBAL PROPERTY MLIR_DIALECT_LIBS)
 add_llvm_executable(foo-opt tools/FooOpt.cpp)
 llvm_update_compile_flags(foo-opt)
 target_link_libraries(foo-opt PRIVATE
   MLIROptLib
+  ${dialect_libs}
 )
 mlir_check_all_link_libraries(foo-opt)
#+end_src

Modify =tools/FooOpt.cpp=:
#+begin_src diff
 #include "mlir/Tools/mlir-opt/MlirOptMain.h"
+#include "mlir/IR/DialectRegistry.h"
+#include "mlir/InitAllDialects.h"
 
 int main(int argc, char **argv) {
   mlir::DialectRegistry registry;
+  mlir::registerAllDialects(registry);
 
   return mlir::asMainReturnCode(
       mlir::MlirOptMain(argc, argv, "foo opt\n", registry));
#+end_src

* register built-in passes

Modify =CMakeLists.txt=:
#+begin_src diff
 get_property(dialect_libs GLOBAL PROPERTY MLIR_DIALECT_LIBS)
+get_property(conversion_libs GLOBAL PROPERTY MLIR_CONVERSION_LIBS)
 add_llvm_executable(foo-opt tools/FooOpt.cpp)
 llvm_update_compile_flags(foo-opt)
 target_link_libraries(foo-opt PRIVATE
   MLIROptLib
   ${dialect_libs}
+  ${conversion_libs}
 )
#+end_src

Modify =tools/FooOpt.cpp=:
#+begin_src diff
 #include "mlir/Tools/mlir-opt/MlirOptMain.h"
 #include "mlir/IR/DialectRegistry.h"
 #include "mlir/InitAllDialects.h"
+#include "mlir/InitAllPasses.h"
 
 int main(int argc, char **argv) {
   mlir::DialectRegistry registry;
   mlir::registerAllDialects(registry);
+  mlir::registerAllPasses();
 
   return mlir::asMainReturnCode(
       mlir::MlirOptMain(argc, argv, "foo opt\n", registry));
#+end_src


* add unit tests

Modify =CMakeLists.txt=:
#+begin_src diff
 ${conversion_libs}
 )
 mlir_check_all_link_libraries(foo-opt)
+
+add_subdirectory(tests)
  
#+end_src

Make =tests= directory, add =tests/CMakeLists.txt=:
#+begin_src cmake
configure_lit_site_cfg(
  ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.py.in
  ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg.py
  MAIN_CONFIG
  ${CMAKE_CURRENT_SOURCE_DIR}/lit.cfg.py
)

add_lit_testsuite(check-foo
  "Running the lit tests"
  ${CMAKE_CURRENT_BINARY_DIR}
  DEPENDS foo-opt)
set_target_properties(check-foo PROPERTIES FOLDER "Tests")
#+end_src

Create =tests/lit.site.cfg.py.in=:
#+begin_src python
config.foo_tools_dir = "@CMAKE_BINARY_DIR@/bin"

import lit.llvm
lit.llvm.initialize(lit_config, config)

lit_config.load_config(config, "@CMAKE_CURRENT_SOURCE_DIR@/lit.cfg.py")
#+end_src

Create =tests/lit.cfg.py=:
#+begin_src python
import os

from lit.formats import ShTest
from lit.llvm import llvm_config

config.name = "foo"
config.test_format = ShTest()
config.suffixes = [".mlir"]
config.test_source_root = os.path.dirname(__file__)
tool_dirs = [config.foo_tools_dir]
tools = ['foo-opt']
llvm_config.add_tool_substitutions(tools, tool_dirs)
#+end_src

Create a simple unit test, =tests/add.mlir=:
#+begin_src mlir
// RUN: foo-opt %s -canonicalize | FileCheck %s

func.func @add(%arg: i32) -> i32 {
  %0 = arith.constant 1 : i32
  %1 = arith.constant 1 : i32
  %2 = arith.addi %0, %1 : i32
  func.return %2 : i32
}

// CHECK-LABEL: func.func @add
// CHECK-NEXT: %[[C:.*]] = arith.constant 2
// CHECK-NEXT: return %[[C]]
#+end_src

You can run tests with:
#+begin_src shell
$ cmake --build build --target check-foo
# or
$ llvm-lit build/tests
#+end_src

* add pass

Create =lib/Transform/Arith/Passes.td=:
#+begin_src tablegen
#ifndef TRANSFORM_ARITH_PASSES
#define TRANSFORM_ARITH_PASSES

include "mlir/Pass/PassBase.td"

def MyFirstConstantFolding : Pass<"my-first-constant-folding"> {
}

#endif // TRANSFORM_ARITH_PASSES
#+end_src

Create =lib/Transform/Arith/Passes.h=:
#+begin_src c++
#pragma once

#include "Transform/Arith/MyFirstConstantFolding.h"

namespace mlir {
namespace foo {

#define GEN_PASS_REGISTRATION
#include "Transform/Arith/Passes.h.inc"

} // namespace foo
} // namespace mlir
#+end_src

Create =lib/Transform/Arith/MyFirstConstantFolding.h=:
#+begin_src c++
#pragma once

#include "mlir/Pass/Pass.h"

namespace mlir {
namespace foo {

#define GEN_PASS_DECL_MYFIRSTCONSTANTFOLDING
#include "Transform/Arith/Passes.h.inc"

} // namespace foo
} // namespace mlir
#+end_src

Create =lib/Transform/Arith/MyFirstConstantFolding.cpp=:
#+begin_src c++
#include "Transform/Arith/MyFirstConstantFolding.h"

#include "mlir/Dialect/Arith/IR/Arith.h"
#include "mlir/IR/PatternMatch.h"
#include "mlir/Pass/Pass.h"
#include "mlir/Transforms/GreedyPatternRewriteDriver.h"

namespace mlir {
namespace foo {

#define GEN_PASS_DEF_MYFIRSTCONSTANTFOLDING
#include "Transform/Arith/Passes.h.inc"

struct MyFirstConstantFoldingPattern : public OpRewritePattern<arith::AddIOp> {
  MyFirstConstantFoldingPattern(mlir::MLIRContext *context)
      : OpRewritePattern<arith::AddIOp>(context) {}

  LogicalResult matchAndRewrite(arith::AddIOp op,
                                PatternRewriter &rewriter) const override {
    auto constLhs = op.getLhs().getDefiningOp<arith::ConstantIntOp>();
    auto constRhs = op.getRhs().getDefiningOp<arith::ConstantIntOp>();
    if (!constLhs || !constRhs)
      return failure();
    auto result = constLhs.value() + constRhs.value();
    rewriter.replaceOpWithNewOp<arith::ConstantIntOp>(op, result, op.getType());
    return success();
  }
};

struct MyFirstConstantFolding
    : impl::MyFirstConstantFoldingBase<MyFirstConstantFolding> {
  using MyFirstConstantFoldingBase::MyFirstConstantFoldingBase;

  void runOnOperation() override {
    mlir::RewritePatternSet patterns(&getContext());
    patterns.add<MyFirstConstantFoldingPattern>(&getContext());
    (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
  }
};

} // namespace foo
} // namespace mlir
#+end_src

Create =lib/Transform/Arith/CMakeLists.txt=:
#+begin_src cmake
set(LLVM_TARGET_DEFINITIONS Passes.td)
mlir_tablegen(Passes.h.inc -gen-pass-decls -name Arith)
add_public_tablegen_target(ArithPassIncGen)

add_mlir_library(
  ArithPass
  MyFirstConstantFolding.cpp
DEPENDS
  ArithPassIncGen
)
#+end_src

Modify =CMakeLists.txt=:
#+begin_src diff
@@ -22,11 +22,13 @@ include(HandleLLVMOptions)
 
 include_directories(${LLVM_INCLUDE_DIRS})
 include_directories(${MLIR_INCLUDE_DIRS})
-include_directories(${PROJECT_SOURCE_DIR}/include)
-include_directories(${PROJECT_BINARY_DIR}/include)
+include_directories(${PROJECT_SOURCE_DIR}/lib)
+include_directories(${PROJECT_BINARY_DIR}/lib)
 link_directories(${LLVM_BUILD_LIBRARY_DIR})
 add_definitions(${LLVM_DEFINITIONS})
 
+add_subdirectory(lib/Transform/Arith)
+
 get_property(dialect_libs GLOBAL PROPERTY MLIR_DIALECT_LIBS)
 get_property(conversion_libs GLOBAL PROPERTY MLIR_CONVERSION_LIBS)
 add_llvm_executable(foo-opt tools/FooOpt.cpp)
@@ -35,6 +37,7 @@ target_link_libraries(foo-opt PRIVATE
   MLIROptLib
   ${dialect_libs}
   ${conversion_libs}
+  ArithPass
 )
 mlir_check_all_link_libraries(foo-opt)
#+end_src

Modify =tools/FooOpt.cpp=:
#+begin_src diff
@@ -1,4 +1,4 @@
 #include "mlir/IR/DialectRegistry.h"
 #include "mlir/InitAllDialects.h"
 #include "mlir/InitAllPasses.h"
+#include "Transform/Arith/Passes.h"
 
 int main(int argc, char **argv) {
   mlir::DialectRegistry registry;
   mlir::registerAllDialects(registry);
   mlir::registerAllPasses();
 
+  mlir::foo::registerArithPasses();
+
   return mlir::asMainReturnCode(
       mlir::MlirOptMain(argc, argv, "foo opt\n", registry));
 }
#+end_src

Modify =tests/add.mlir=:
#+begin_src diff
-// RUN: foo-opt %s -canonicalize | FileCheck %s
+// RUN: foo-opt %s -my-first-constant-folding | FileCheck %s
 
 func.func @add(%arg: i32) -> i32 {
   %0 = arith.constant 1 : i32
#+end_src

* add dialect

Create =lib/Dialect/Foo/FooBase.td=:
#+begin_src tablegen
#ifndef DIALECT_FOOBASE_TD
#define DIALECT_FOOBASE_TD

include "mlir/IR/OpBase.td"

def Foo_Dialect : Dialect {
  let name = "foo";
  let cppNamespace = "::mlir::foo";
}

class Foo_Op<string mnemonic, list<Trait> traits = []>
        : Op<Foo_Dialect, mnemonic, traits>;

#endif
#+end_src

Create =lib/Dialect/Foo/FooOps.td=:
#+begin_src tablegen
#ifndef DIALECT_FOOOPS_TD
#define DIALECT_FOOOPS_TD

include "FooBase.td"

def Foo_AddOp: Foo_Op<"add"> {
  let arguments = (ins AnyTensor:$lhs, AnyTensor:$rhs);
  let results = (outs AnyTensor:$output);
}

#endif
#+end_src

Create =lib/Dialect/Foo/FooOps.h=:
#+begin_src c++
#pragma once

#include "mlir/IR/BuiltinOps.h"

#include "Dialect/Foo/FooOpsDialect.h.inc"

#define GET_OP_CLASSES
#include "Dialect/Foo/FooOps.h.inc"
#+end_src

Create =lib/Dialect/Foo/FooOps.cpp=:
#+begin_src c++
#include "Dialect/Foo/FooOps.h"

#include "Dialect/Foo/FooOpsDialect.cpp.inc"

void mlir::foo::FooDialect::initialize() {
  addOperations<
#define GET_OP_LIST
#include "Dialect/Foo/FooOps.cpp.inc"
      >();
}

#define GET_OP_CLASSES
#include "Dialect/Foo/FooOps.cpp.inc"
#+end_src
